undefined + 1;
NaN
// из-за неопределённого операнда мы получаем результат не число то есть NaN

'true' == true
false
// оператор вытается сделать сравненение и перед этим приводит к одинаковому типу значение, true в единицу, но стринговое значение не соответствует единицы, от того получаем булуво значение false

false == 'false'
false
// тоже самое что в предидущем примере, а 0 не может быть стринговым, по этому false

null == ''
false
// js пытается при не строгом сравнении перевести при возможности операнды к одному типу, но null так и останется null или undefiened, по этому нам возвращает значение false

3 ** (9 / 3);
27
// для начала мы проводим вычисления в скобках, далее возводим 3 в 3-ю степень и на выходе получаем число 27

!!'false' == !!'true'
true
// здесь оба операнда приводятся к значению true, а true есть true

0 || '0' && 1
1
// выполняется сначала операция && так как она имеет более высокий приоритет чем II, стринговое значение и число 1, последнее истинное будет 1, значит 1, далее выполняется операция II, там наоборот первое истинное или последнее ложное, у нас же первое истинное это 1

1 < 2 < 3
true
// 1 меньше 2, а 2 меньше 3, соответственно булево значение true

'foo'+ + +'bar'
fooNaN
// внунтренний унарный + преобразовывает строку в число, но у нас тринговое значение и на выходе нам возвращает NaN, теперь внешний унарный плюс не преобразовывает значение NaN в число так как это уже есть число, и последний оператор + проводит конкатенацию, в результате мы получаем fooNaN

3 ** 2 / 3;
3
// оператор ** имеет более высокий приоритет, сответственно сначала происходит возведение в степень, а далее уже деление

1 < 2 > 3
false
// логическое преобразование, 1 меньше двух, но два не больше 3, соответственно false

(+null == false) < 1;
false
// сначала в скобках, унарный + преобразует null в число, то есть 0, если 0 == false, значит это true, а true это 1, а 1 не меньше 1, значит false

false && true || true
true
// сначала операцию с && мы получаем false, далее || и мы получаем true

false && (true || true);
false
// выполняется операция в скобках, что даёт нам true, далее выполняем операцию && на что мы получаем false

(+null == false) < 1 ** 5;
false
// для начала в скобках, +null преобрзауется в ноль, false то же в 0, соответственно у нас true, далее 1 возводим в 5 степень, получаем 1, потом true преобразуем в 1, и 1 < 1 получаем false


